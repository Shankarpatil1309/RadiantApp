import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:sizer/sizer.dart';

import '../../core/app_export.dart';
import '../../controllers/assignment_controller.dart';
import '../../models/assignment_model.dart';
import './widgets/assignment_detail_bottom_sheet_widget.dart';
import './widgets/assignment_upload_bottom_sheet_widget.dart';
import './widgets/faculty_assignment_card_widget.dart';
import './widgets/faculty_assignment_filter_widget.dart';

class FacultyAssignmentManagementScreen extends ConsumerStatefulWidget {
  final bool isEmbedded;
  final VoidCallback? onBackPressed;

  const FacultyAssignmentManagementScreen({
    Key? key,
    this.isEmbedded = false,
    this.onBackPressed,
  }) : super(key: key);

  @override
  ConsumerState<FacultyAssignmentManagementScreen> createState() =>
      _FacultyAssignmentManagementScreenState();
}

class _FacultyAssignmentManagementScreenState
    extends ConsumerState<FacultyAssignmentManagementScreen> {
  final TextEditingController _searchController = TextEditingController();
  // TODO: Replace with actual faculty ID from authentication
  static const String facultyId = 'EMP2024011'; // Temporary ID for testing

  @override
  void initState() {
    super.initState();
    _searchController.addListener(_onSearchChanged);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref
          .read(assignmentControllerProvider.notifier)
          .loadAssignments(facultyId);
    });
  }

  @override
  void dispose() {
    _searchController.removeListener(_onSearchChanged);
    _searchController.dispose();
    super.dispose();
  }

  void _onSearchChanged() {
    ref
        .read(assignmentControllerProvider.notifier)
        .updateSearchQuery(_searchController.text);
  }

  Future<void> _refreshAssignments() async {
    print('ðŸ”„ Refreshing assignments for faculty: $facultyId');
    await ref
        .read(assignmentControllerProvider.notifier)
        .loadAssignments(facultyId);

    // Also clear any error states
    ref.read(assignmentControllerProvider.notifier).clearError();
  }

  void _showFilterBottomSheet() {
    final currentFilters = ref.read(assignmentControllerProvider).filters;
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => FacultyAssignmentFilterWidget(
        currentFilters: currentFilters,
        onFiltersChanged: (newFilters) {
          ref
              .read(assignmentControllerProvider.notifier)
              .updateFilters(newFilters);
        },
      ),
    );
  }

  void _showAssignmentDetail(Assignment assignment) {
    final assignmentMap = _convertAssignmentToMap(assignment);
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => AssignmentDetailBottomSheetWidget(
        assignment: assignmentMap,
        onEditAssignment: () => _editAssignment(assignment),
        onExtendDeadline: () => _extendDeadline(assignment),
        onDownloadSubmissions: () => _downloadSubmissions(assignment),
        onSendReminders: () => _sendReminders(assignment),
        onClose: () => Navigator.pop(context),
      ),
    );
  }

  void _showUploadAssignmentSheet() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => AssignmentUploadBottomSheetWidget(
        onUploadAssignment: _uploadNewAssignment,
        onClose: () => Navigator.pop(context),
      ),
    );
  }

  Future<void> _uploadNewAssignment(Map<String, dynamic> assignmentData) async {
    final assignment = Assignment(
      id: '', // Will be generated by Firestore
      title: assignmentData['title'] ?? '',
      description: assignmentData['description'] ?? '',
      subject: assignmentData['subject'] ?? '',
      department: assignmentData['department'] ?? '',
      section: assignmentData['section'] ?? '',
      semester: assignmentData['semester'] ?? 1,
      dueDate:
          assignmentData['deadline'] ?? DateTime.now().add(Duration(days: 7)),
      facultyId: facultyId,
      facultyName: 'Current Faculty', // Replace with actual faculty name
      maxMarks: assignmentData['maxMarks'] ?? 100,
      type: assignmentData['type'] ?? 'assignment',
      fileUrl: assignmentData['fileUrl'],
      allowedFormats: List<String>.from(
          assignmentData['allowedFormats'] ?? ['pdf', 'docx']),
      instructions: assignmentData['instructions'],
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    try {
      await ref
          .read(assignmentControllerProvider.notifier)
          .createAssignment(assignment);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              'Assignment "${assignmentData['title']}" uploaded successfully'),
          behavior: SnackBarBehavior.floating,
          backgroundColor: AppTheme.getStatusColor('success'),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to upload assignment: $e'),
          behavior: SnackBarBehavior.floating,
          backgroundColor: AppTheme.getStatusColor('error'),
        ),
      );
    }
  }

  void _editAssignment(Assignment assignment) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Opening edit interface for ${assignment.title}'),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  Future<void> _extendDeadline(Assignment assignment) async {
    final newDeadline = assignment.dueDate.add(Duration(days: 7));
    try {
      await ref
          .read(assignmentControllerProvider.notifier)
          .extendDeadline(assignment.id, newDeadline, facultyId);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Deadline extended for ${assignment.title}'),
          behavior: SnackBarBehavior.floating,
          backgroundColor: AppTheme.getStatusColor('success'),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to extend deadline: $e'),
          behavior: SnackBarBehavior.floating,
          backgroundColor: AppTheme.getStatusColor('error'),
        ),
      );
    }
  }

  void _downloadSubmissions(Assignment assignment) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Downloading submissions for ${assignment.title}'),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _sendReminders(Assignment assignment) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Reminders sent for ${assignment.title}'),
        behavior: SnackBarBehavior.floating,
        backgroundColor: AppTheme.getStatusColor('success'),
      ),
    );
  }

  // Helper method to convert Assignment to Map for backward compatibility
  Map<String, dynamic> _convertAssignmentToMap(Assignment assignment) {
    return {
      'id': assignment.id,
      'title': assignment.title,
      'description': assignment.description,
      'subject': assignment.subject,
      'department': assignment.department,
      'semester':
          '${assignment.semester}${_getOrdinalSuffix(assignment.semester)} Semester',
      'deadline': assignment.dueDate,
      'uploadDate': assignment.createdAt,
      'submissionCount': 0, // This would come from submissions collection
      'totalStudents': 0, // This would come from student count
      'hasAttachments': assignment.hasFile,
      'attachmentCount': assignment.hasFile ? 1 : 0,
      'status':
          assignment.isActive && assignment.dueDate.isAfter(DateTime.now())
              ? 'active'
              : 'closed',
      'grade': null,
    };
  }

  String _getOrdinalSuffix(int number) {
    if (number >= 11 && number <= 13) return 'th';
    switch (number % 10) {
      case 1:
        return 'st';
      case 2:
        return 'nd';
      case 3:
        return 'rd';
      default:
        return 'th';
    }
  }

  Widget _buildErrorWidget(String error) {
    return Center(
      child: Padding(
        padding: EdgeInsets.all(4.w),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CustomIconWidget(
              iconName: 'error',
              size: 64,
              color: AppTheme.getStatusColor('error'),
            ),
            SizedBox(height: 2.h),
            Text(
              'Error Loading Assignments',
              style: AppTheme.lightTheme.textTheme.headlineSmall?.copyWith(
                color: AppTheme.getStatusColor('error'),
                fontWeight: FontWeight.w600,
              ),
            ),
            SizedBox(height: 1.h),
            Text(
              error,
              style: AppTheme.lightTheme.textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 2.h),
            ElevatedButton(
              onPressed: _refreshAssignments,
              style: ElevatedButton.styleFrom(
                backgroundColor: AppTheme.getRoleColor('faculty'),
              ),
              child: Text(
                'Retry',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final assignmentState = ref.watch(assignmentControllerProvider);
    final groupedAssignments = ref
        .read(assignmentControllerProvider.notifier)
        .groupAssignmentsBySubject();

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Faculty Assignment Management',
          style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(
            color: AppTheme.getRoleColor('faculty'),
            fontWeight: FontWeight.w600,
          ),
        ),
        leading: widget.isEmbedded
            ? IconButton(
                onPressed: widget.onBackPressed ?? () {},
                icon: CustomIconWidget(
                  iconName: 'arrow_back',
                  color: AppTheme.lightTheme.colorScheme.onSurface,
                  size: 24,
                ),
              )
            : IconButton(
                onPressed: () => Navigator.pop(context),
                icon: CustomIconWidget(
                  iconName: 'arrow_back',
                  color: AppTheme.lightTheme.colorScheme.onSurface,
                  size: 24,
                ),
              ),
        actions: [
          IconButton(
            onPressed: _showFilterBottomSheet,
            icon: CustomIconWidget(
              iconName: 'filter_list',
              color: AppTheme.getRoleColor('faculty'),
              size: 24,
            ),
          ),
          // Debug button - remove in production
          IconButton(
            onPressed: () async {
              print('ðŸ”§ DEBUG: Manually refreshing assignments');
              await _refreshAssignments();
              final state = ref.read(assignmentControllerProvider);
              print(
                  'ðŸ”§ DEBUG: Current state - ${state.assignments.length} total, ${state.filteredAssignments.length} filtered');
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                      'Debug: ${state.assignments.length} total, ${state.filteredAssignments.length} filtered'),
                ),
              );
            },
            icon: CustomIconWidget(
              iconName: 'bug_report',
              color: Colors.orange,
              size: 24,
            ),
          ),
        ],
        bottom: PreferredSize(
          preferredSize: Size.fromHeight(8.h),
          child: Padding(
            padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                hintText: 'Search assignments, subjects, departments...',
                prefixIcon: Padding(
                  padding: EdgeInsets.all(3.w),
                  child: CustomIconWidget(
                    iconName: 'search',
                    color: AppTheme.lightTheme.colorScheme.onSurface
                        .withValues(alpha: 0.6),
                    size: 20,
                  ),
                ),
                suffixIcon: assignmentState.searchQuery.isNotEmpty
                    ? IconButton(
                        onPressed: () {
                          _searchController.clear();
                        },
                        icon: CustomIconWidget(
                          iconName: 'clear',
                          color: AppTheme.lightTheme.colorScheme.onSurface
                              .withValues(alpha: 0.6),
                          size: 20,
                        ),
                      )
                    : null,
              ),
            ),
          ),
        ),
      ),
      body: assignmentState.isLoading
          ? Center(
              child: CircularProgressIndicator(
                color: AppTheme.getRoleColor('faculty'),
              ),
            )
          : assignmentState.error != null
              ? _buildErrorWidget(assignmentState.error!)
              : assignmentState.filteredAssignments.isEmpty
                  ? Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          CustomIconWidget(
                            iconName: 'assignment',
                            size: 64,
                            color: AppTheme.lightTheme.colorScheme.onSurface
                                .withValues(alpha: 0.3),
                          ),
                          SizedBox(height: 2.h),
                          Text(
                            assignmentState.searchQuery.isNotEmpty
                                ? 'No Results Found'
                                : 'No Assignments Created',
                            style: AppTheme.lightTheme.textTheme.headlineSmall
                                ?.copyWith(
                              color: AppTheme.lightTheme.colorScheme.onSurface
                                  .withValues(alpha: 0.6),
                            ),
                          ),
                          SizedBox(height: 1.h),
                          Text(
                            assignmentState.searchQuery.isNotEmpty
                                ? 'Try adjusting your search or filters'
                                : 'Start by creating your first assignment',
                            style: AppTheme.lightTheme.textTheme.bodyMedium
                                ?.copyWith(
                              color: AppTheme.lightTheme.colorScheme.onSurface
                                  .withValues(alpha: 0.6),
                            ),
                            textAlign: TextAlign.center,
                          ),
                          if (assignmentState.searchQuery.isNotEmpty) ...[
                            SizedBox(height: 2.h),
                            ElevatedButton(
                              onPressed: () => _searchController.clear(),
                              child: Text('Clear Search'),
                            ),
                          ],
                        ],
                      ),
                    )
                  : RefreshIndicator(
                      onRefresh: _refreshAssignments,
                      color: AppTheme.getRoleColor('faculty'),
                      child: ListView(
                        padding: EdgeInsets.only(bottom: 10.h),
                        children: [
                          // Statistics Summary
                          Container(
                            margin: EdgeInsets.all(4.w),
                            padding: EdgeInsets.all(4.w),
                            decoration: BoxDecoration(
                              color: AppTheme.getRoleColor('faculty')
                                  .withValues(alpha: 0.1),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Assignment Overview',
                                  style: AppTheme
                                      .lightTheme.textTheme.titleMedium
                                      ?.copyWith(
                                    color: AppTheme.getRoleColor('faculty'),
                                    fontWeight: FontWeight.w600,
                                  ),
                                ),
                                SizedBox(height: 2.h),
                                Row(
                                  children: [
                                    Expanded(
                                      child: Column(
                                        children: [
                                          Text(
                                            '${assignmentState.stats['active'] ?? 0}',
                                            style: AppTheme.lightTheme.textTheme
                                                .headlineSmall
                                                ?.copyWith(
                                              color: AppTheme.getRoleColor(
                                                  'faculty'),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          Text(
                                            'Active',
                                            style: AppTheme
                                                .lightTheme.textTheme.bodySmall,
                                          ),
                                        ],
                                      ),
                                    ),
                                    Container(
                                      width: 1,
                                      height: 6.h,
                                      color: AppTheme
                                          .lightTheme.colorScheme.outline,
                                    ),
                                    Expanded(
                                      child: Column(
                                        children: [
                                          Text(
                                            '${assignmentState.stats['closed'] ?? 0}',
                                            style: AppTheme.lightTheme.textTheme
                                                .headlineSmall
                                                ?.copyWith(
                                              color: AppTheme.getStatusColor(
                                                  'success'),
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          Text(
                                            'Completed',
                                            style: AppTheme
                                                .lightTheme.textTheme.bodySmall,
                                          ),
                                        ],
                                      ),
                                    ),
                                    Container(
                                      width: 1,
                                      height: 6.h,
                                      color: AppTheme
                                          .lightTheme.colorScheme.outline,
                                    ),
                                    Expanded(
                                      child: Column(
                                        children: [
                                          Text(
                                            '${assignmentState.stats['total'] ?? 0}',
                                            style: AppTheme.lightTheme.textTheme
                                                .headlineSmall
                                                ?.copyWith(
                                              color: AppTheme
                                                  .lightTheme.primaryColor,
                                              fontWeight: FontWeight.w600,
                                            ),
                                          ),
                                          Text(
                                            'Total Submissions',
                                            style: AppTheme
                                                .lightTheme.textTheme.bodySmall,
                                          ),
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),

                          // Subject Sections
                          ...groupedAssignments.entries.map((entry) {
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Padding(
                                  padding: EdgeInsets.symmetric(
                                      horizontal: 4.w, vertical: 1.h),
                                  child: Row(
                                    children: [
                                      CustomIconWidget(
                                        iconName: 'book',
                                        color: AppTheme.getRoleColor('faculty'),
                                        size: 20,
                                      ),
                                      SizedBox(width: 2.w),
                                      Text(
                                        entry.key,
                                        style: AppTheme
                                            .lightTheme.textTheme.titleMedium
                                            ?.copyWith(
                                          color:
                                              AppTheme.getRoleColor('faculty'),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                      SizedBox(width: 2.w),
                                      Container(
                                        padding: EdgeInsets.symmetric(
                                            horizontal: 2.w, vertical: 0.5.h),
                                        decoration: BoxDecoration(
                                          color:
                                              AppTheme.getRoleColor('faculty')
                                                  .withValues(alpha: 0.1),
                                          borderRadius:
                                              BorderRadius.circular(12),
                                        ),
                                        child: Text(
                                          '${entry.value.length}',
                                          style: AppTheme
                                              .lightTheme.textTheme.bodySmall
                                              ?.copyWith(
                                            color: AppTheme.getRoleColor(
                                                'faculty'),
                                            fontWeight: FontWeight.w500,
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                ...entry.value.map((assignment) {
                                  return FacultyAssignmentCardWidget(
                                    assignment:
                                        _convertAssignmentToMap(assignment),
                                    onTap: () =>
                                        _showAssignmentDetail(assignment),
                                  );
                                }).toList(),
                                SizedBox(height: 2.h),
                              ],
                            );
                          }).toList(),
                        ],
                      ),
                    ),
      floatingActionButton: FloatingActionButton.extended(
        heroTag: "faculty_assignment_upload_fab",
        onPressed: _showUploadAssignmentSheet,
        backgroundColor: AppTheme.getRoleColor('faculty'),
        foregroundColor: Colors.white,
        icon: CustomIconWidget(
          iconName: 'add',
          color: Colors.white,
          size: 24,
        ),
        label: Text(
          'New Assignment',
          style: AppTheme.lightTheme.textTheme.labelLarge?.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
      ),
    );
  }
}
